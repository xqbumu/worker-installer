{% func Shell(r Result) %}
#!/bin/bash
if [ "$DEBUG" == "1" ]; then
	set -x
fi
TMP_DIR=$(mktemp -d -t worker-installer-XXXXXXXXXX)
function cleanup {
	rm -rf $TMP_DIR > /dev/null
}
function fail {
	cleanup
	msg=$1
	echo "============"
	echo "Error: $msg" 1>&2
	exit 1
}
function choose_asset {
	OS_ARCH=$1
	DISTRO=$2
	case "${OS_ARCH}_${DISTRO}" in{% for _, n := range r.Assets %}
	"{%s n.OS %}_{%s n.Arch %}_{%s n.Distro %}")
		echo "{%s n.URL %} {%s n.Type %}"
		return
		;;{% endfor %}
	*) exit 1;;
	esac
}
function install {
	#settings
	USER="{%s r.User %}"
	IFS=',' read -r -a PROG_LIST <<< "{%s r.Program %}"
	ASPROG="{% if len(r.AsProgram)>0  %} {%s r.AsProgram %} {% endif %}"
	MOVE="{%v r.MoveToPath %}"
	RELEASE="{%s r.Release %}" # {%s r.ResolvedRelease %}
	INSECURE="{%v r.Insecure %}"
	OUT_DIR="$(pwd)"
	{%- if r.MoveToPath -%}
	if [ -d "$HOME/.local/bin" ]; then
		OUT_DIR="$HOME/.local/bin"
	elif [ -d "/opt/local/bin" ]; then
		OUT_DIR="/opt/local/bin"
	fi
	{%- endif -%}
	GH="https://github.com"
	#bash check
	[ ! "$BASH_VERSION" ] && fail "Please use bash instead"
	[ ! -d $OUT_DIR ] && fail "output directory missing: $OUT_DIR"
	#dependency check, assume we are a standard POISX machine
	which find > /dev/null || fail "find not installed"
	which xargs > /dev/null || fail "xargs not installed"
	which sort > /dev/null || fail "sort not installed"
	which tail > /dev/null || fail "tail not installed"
	which cut > /dev/null || fail "cut not installed"
	which du > /dev/null || fail "du not installed"
	#choose an HTTP client
	GET=""
	if which curl > /dev/null; then
		GET="curl"
		if [[ $INSECURE = "true" ]]; then GET="$GET --insecure"; fi
		GET="$GET --fail -# -L"
	elif which wget > /dev/null; then
		GET="wget"
		if [[ $INSECURE = "true" ]]; then GET="$GET --no-check-certificate"; fi
		GET="$GET -qO-"
	else
		fail "neither wget/curl are installed"
	fi
	#debug HTTP
	if [ "$DEBUG" == "1" ]; then
		GET="$GET -v"
	fi
	#optional auth to install from private repos
	#NOTE: this also needs to be set on your instance of installer
	AUTH="${GITHUB_TOKEN}"
	if [ ! -z "$AUTH" ]; then
		GET="$GET -H 'Authorization: $AUTH'"
	fi
	#find OS #TODO BSDs and other posixs
	case `uname -s` in
	Darwin) OS="darwin";;
	Linux) OS="linux";;
	*) fail "unknown os: $(uname -s)";;
	esac
	#find ARCH
	if uname -m | grep -E '(arm|arch)64' > /dev/null; then
		ARCH="arm64"
		{% if !r.M1Asset %}
		# no m1 assets. if on mac arm64, rosetta allows fallback to amd64
		if [[ $OS = "darwin" ]]; then
			ARCH="amd64"
		fi
		{% endif %}
	elif uname -m | grep 64 > /dev/null; then
		ARCH="amd64"
	elif uname -m | grep arm > /dev/null; then
		ARCH="arm" #TODO armv6/v7
	elif uname -m | grep 386 > /dev/null; then
		ARCH="386"
	else
		fail "unknown arch: $(uname -m)"
	fi
	#find Distro
	if [ -f /etc/os-release ]; then
		DISTRO=$(grep ^ID_LIKE= /etc/os-release | cut -d '=' -f 2-)
		if [ -z "$DISTRO" ]; then
			DISTRO=$(grep ^ID= /etc/os-release | cut -d '=' -f 2-)
		fi
	else
		DISTRO="generic"
	fi
	#choose from asset list
	OS_ARCH="${OS}_${ARCH}"
	ASSET_INFO=$(choose_asset "$OS_ARCH" "generic")
	if [ $? -ne 0 ]; then
		ASSET_INFO=$(choose_asset "$OS_ARCH" "$DISTRO")
	else
		DISTRO="generic"
	fi
	URL=$(echo $ASSET_INFO | cut -d ' ' -f 1)
	FTYPE=$(echo $ASSET_INFO | cut -d ' ' -f 2)
	if [ -z "$URL" ] || [ -z "$FTYPE" ]; then
		fail "No valid asset found for ${OS_ARCH}"
	fi
	#got URL! download it...
	echo -n "{% if r.MoveToPath %}Installing{% else %}Downloading{% endif %}"
	echo -n " $USER/${PROG_LIST[*]}"
	if [ ! -z "$RELEASE" ]; then
		echo -n " $RELEASE"
	fi
	if [ ! -z "$ASPROG" ]; then
		echo -n " as $ASPROG"
	fi
	echo -n " (${OS}/${ARCH})"
	{% if r.Search %}
	# web search, give time to cancel
	echo -n " in 5 seconds"
	for i in 1 2 3 4 5; do
		sleep 1
		echo -n "."
	done
	{% else %}
	echo "....."
	{% endif %}
	#enter tempdir
	mkdir -p $TMP_DIR
	cd $TMP_DIR
	if [[ $FTYPE = ".gz" ]]; then
		which gzip > /dev/null || fail "gzip is not installed"
		bash -c "$GET $URL" | gzip -d - > "${PROG_LIST[0]}" || fail "download failed"
	elif [[ $FTYPE = ".bz2" ]]; then
		which bzip2 > /dev/null || fail "bzip2 is not installed"
		bash -c "$GET $URL" | bzip2 -d - > "${PROG_LIST[0]}" || fail "download failed"
	elif [[ $FTYPE = ".tar.bz" ]] || [[ $FTYPE = ".tar.bz2" ]]; then
		which tar > /dev/null || fail "tar is not installed"
		which bzip2 > /dev/null || fail "bzip2 is not installed"
		bash -c "$GET $URL" | tar jxf - || fail "download failed"
	elif [[ $FTYPE = ".tar.gz" ]] || [[ $FTYPE = ".tgz" ]]; then
		which tar > /dev/null || fail "tar is not installed"
		which gzip > /dev/null || fail "gzip is not installed"
		bash -c "$GET $URL" | tar zxf - || fail "download failed"
	elif [[ $FTYPE = ".tar.xz" ]] || [[ $FTYPE = ".txz" ]]; then
		which tar > /dev/null || fail "tar is not installed"
		which xz > /dev/null || fail "xz is not installed"
		bash -c "$GET $URL" | tar Jxf - || fail "download failed"
	elif [[ $FTYPE = ".zip" ]]; then
		which unzip > /dev/null || fail "unzip is not installed"
		bash -c "$GET $URL" > tmp.zip || fail "download failed"
		unzip -o -qq tmp.zip || fail "unzip failed"
		rm tmp.zip || fail "cleanup failed"
	elif [[ $FTYPE = ".bin" ]]; then
		bash -c "$GET $URL" > "${PROG_LIST[0]}_${OS}_${ARCH}" || fail "download failed"
	elif [[ $FTYPE = ".deb" ]]; then
		which dpkg > /dev/null || fail "dpkg is not installed"
		bash -c "$GET $URL" > tmp.deb || fail "download failed"
		sudo dpkg -i tmp.deb || fail "dpkg install failed"
		rm tmp.deb || fail "cleanup failed"
	elif [[ $FTYPE = ".rpm" ]]; then
		which rpm > /dev/null || fail "rpm is not installed"
		bash -c "$GET $URL" > tmp.rpm || fail "download failed"
		sudo rpm -i tmp.rpm || fail "rpm install failed"
		rm tmp.rpm || fail "cleanup failed"
	else
		fail "unknown file type: $FTYPE"
	fi
	if [[ $DISTRO = "generic" ]]; then
		for PROG in "${PROG_LIST[@]}"; do
			BIN_PATH=$(find . -type f | grep -i "$PROG" | head -n 1)
			[[ -z "$BIN_PATH" ]] && fail "Binary $PROG not found"

			chmod +x "$BIN_PATH" || fail "chmod +x failed on $BIN_PATH"
			DEST="$OUT_DIR/$PROG"

			OUT=$(mv "$BIN_PATH" "$DEST" 2>&1)
			STATUS=$?
			if [ $STATUS -ne 0 ]; then
				if [[ $OUT =~ "Permission denied" ]]; then
					if [ -w "$DEST" ]; then
						mv "$BIN_PATH" "$DEST" || fail "mv failed for $BIN_PATH"
					else
						echo "mv with sudo..."
						sudo mv "$BIN_PATH" "$DEST" || fail "sudo mv failed for $BIN_PATH"
					fi
				else
					fail "mv failed for $BIN_PATH ($OUT)"
				fi
			fi
			echo "Moved $PROG to $DEST"
		done
	fi
	cleanup
}
install
{% endfunc %}